/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.codeengine.service.model.impl;

import com.codeengine.service.model.Clazz;
import com.codeengine.service.model.ClazzModel;
import com.codeengine.service.model.ClazzSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Clazz service. Represents a row in the &quot;GB_Clazz&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.codeengine.service.model.ClazzModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ClazzImpl}.
 * </p>
 *
 * @author ces
 * @see ClazzImpl
 * @see com.codeengine.service.model.Clazz
 * @see com.codeengine.service.model.ClazzModel
 * @generated
 */
@JSON(strict = true)
public class ClazzModelImpl extends BaseModelImpl<Clazz> implements ClazzModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a clazz model instance should use the {@link com.codeengine.service.model.Clazz} interface instead.
	 */
	public static final String TABLE_NAME = "GB_Clazz";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "clazzId", Types.BIGINT },
			{ "clazzName", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table GB_Clazz (uuid_ VARCHAR(75) null,clazzId LONG not null primary key,clazzName VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table GB_Clazz";
	public static final String ORDER_BY_JPQL = " ORDER BY clazz.clazzId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY GB_Clazz.clazzId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.codeengine.service.model.Clazz"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.codeengine.service.model.Clazz"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.codeengine.service.model.Clazz"),
			true);
	public static long UUID_COLUMN_BITMASK = 1L;
	public static long CLAZZID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Clazz toModel(ClazzSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Clazz model = new ClazzImpl();

		model.setUuid(soapModel.getUuid());
		model.setClazzId(soapModel.getClazzId());
		model.setClazzName(soapModel.getClazzName());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Clazz> toModels(ClazzSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Clazz> models = new ArrayList<Clazz>(soapModels.length);

		for (ClazzSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.codeengine.service.model.Clazz"));

	public ClazzModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _clazzId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setClazzId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _clazzId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Clazz.class;
	}

	@Override
	public String getModelClassName() {
		return Clazz.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("clazzId", getClazzId());
		attributes.put("clazzName", getClazzName());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long clazzId = (Long)attributes.get("clazzId");

		if (clazzId != null) {
			setClazzId(clazzId);
		}

		String clazzName = (String)attributes.get("clazzName");

		if (clazzName != null) {
			setClazzName(clazzName);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getClazzId() {
		return _clazzId;
	}

	@Override
	public void setClazzId(long clazzId) {
		_clazzId = clazzId;
	}

	@JSON
	@Override
	public String getClazzName() {
		if (_clazzName == null) {
			return StringPool.BLANK;
		}
		else {
			return _clazzName;
		}
	}

	@Override
	public void setClazzName(String clazzName) {
		_clazzName = clazzName;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Clazz.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Clazz toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Clazz)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ClazzImpl clazzImpl = new ClazzImpl();

		clazzImpl.setUuid(getUuid());
		clazzImpl.setClazzId(getClazzId());
		clazzImpl.setClazzName(getClazzName());

		clazzImpl.resetOriginalValues();

		return clazzImpl;
	}

	@Override
	public int compareTo(Clazz clazz) {
		long primaryKey = clazz.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Clazz)) {
			return false;
		}

		Clazz clazz = (Clazz)obj;

		long primaryKey = clazz.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ClazzModelImpl clazzModelImpl = this;

		clazzModelImpl._originalUuid = clazzModelImpl._uuid;

		clazzModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Clazz> toCacheModel() {
		ClazzCacheModel clazzCacheModel = new ClazzCacheModel();

		clazzCacheModel.uuid = getUuid();

		String uuid = clazzCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			clazzCacheModel.uuid = null;
		}

		clazzCacheModel.clazzId = getClazzId();

		clazzCacheModel.clazzName = getClazzName();

		String clazzName = clazzCacheModel.clazzName;

		if ((clazzName != null) && (clazzName.length() == 0)) {
			clazzCacheModel.clazzName = null;
		}

		return clazzCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", clazzId=");
		sb.append(getClazzId());
		sb.append(", clazzName=");
		sb.append(getClazzName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.codeengine.service.model.Clazz");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>clazzId</column-name><column-value><![CDATA[");
		sb.append(getClazzId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>clazzName</column-name><column-value><![CDATA[");
		sb.append(getClazzName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Clazz.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Clazz.class };
	private String _uuid;
	private String _originalUuid;
	private long _clazzId;
	private String _clazzName;
	private long _columnBitmask;
	private Clazz _escapedModel;
}