/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.codeengine.StudentManagement.service.base;

import com.codeengine.StudentManagement.model.Clazz;
import com.codeengine.StudentManagement.service.ClazzLocalService;
import com.codeengine.StudentManagement.service.persistence.ClazzPersistence;
import com.codeengine.StudentManagement.service.persistence.SchoolPersistence;
import com.codeengine.StudentManagement.service.persistence.StudentFinder;
import com.codeengine.StudentManagement.service.persistence.StudentPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the clazz local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.codeengine.StudentManagement.service.impl.ClazzLocalServiceImpl}.
 * </p>
 *
 * @author ces
 * @see com.codeengine.StudentManagement.service.impl.ClazzLocalServiceImpl
 * @see com.codeengine.StudentManagement.service.ClazzLocalServiceUtil
 * @generated
 */
public abstract class ClazzLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements ClazzLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.codeengine.StudentManagement.service.ClazzLocalServiceUtil} to access the clazz local service.
	 */

	/**
	 * Adds the clazz to the database. Also notifies the appropriate model listeners.
	 *
	 * @param clazz the clazz
	 * @return the clazz that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Clazz addClazz(Clazz clazz) throws SystemException {
		clazz.setNew(true);

		return clazzPersistence.update(clazz);
	}

	/**
	 * Creates a new clazz with the primary key. Does not add the clazz to the database.
	 *
	 * @param clazzId the primary key for the new clazz
	 * @return the new clazz
	 */
	@Override
	public Clazz createClazz(long clazzId) {
		return clazzPersistence.create(clazzId);
	}

	/**
	 * Deletes the clazz with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param clazzId the primary key of the clazz
	 * @return the clazz that was removed
	 * @throws PortalException if a clazz with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Clazz deleteClazz(long clazzId)
		throws PortalException, SystemException {
		return clazzPersistence.remove(clazzId);
	}

	/**
	 * Deletes the clazz from the database. Also notifies the appropriate model listeners.
	 *
	 * @param clazz the clazz
	 * @return the clazz that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Clazz deleteClazz(Clazz clazz) throws SystemException {
		return clazzPersistence.remove(clazz);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(Clazz.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return clazzPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.codeengine.StudentManagement.model.impl.ClazzModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return clazzPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.codeengine.StudentManagement.model.impl.ClazzModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return clazzPersistence.findWithDynamicQuery(dynamicQuery, start, end,
			orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return clazzPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return clazzPersistence.countWithDynamicQuery(dynamicQuery, projection);
	}

	@Override
	public Clazz fetchClazz(long clazzId) throws SystemException {
		return clazzPersistence.fetchByPrimaryKey(clazzId);
	}

	/**
	 * Returns the clazz with the primary key.
	 *
	 * @param clazzId the primary key of the clazz
	 * @return the clazz
	 * @throws PortalException if a clazz with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public Clazz getClazz(long clazzId) throws PortalException, SystemException {
		return clazzPersistence.findByPrimaryKey(clazzId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return clazzPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the clazzs.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.codeengine.StudentManagement.model.impl.ClazzModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of clazzs
	 * @param end the upper bound of the range of clazzs (not inclusive)
	 * @return the range of clazzs
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<Clazz> getClazzs(int start, int end) throws SystemException {
		return clazzPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of clazzs.
	 *
	 * @return the number of clazzs
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getClazzsCount() throws SystemException {
		return clazzPersistence.countAll();
	}

	/**
	 * Updates the clazz in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param clazz the clazz
	 * @return the clazz that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Clazz updateClazz(Clazz clazz) throws SystemException {
		return clazzPersistence.update(clazz);
	}

	/**
	 * Returns the clazz local service.
	 *
	 * @return the clazz local service
	 */
	public com.codeengine.StudentManagement.service.ClazzLocalService getClazzLocalService() {
		return clazzLocalService;
	}

	/**
	 * Sets the clazz local service.
	 *
	 * @param clazzLocalService the clazz local service
	 */
	public void setClazzLocalService(
		com.codeengine.StudentManagement.service.ClazzLocalService clazzLocalService) {
		this.clazzLocalService = clazzLocalService;
	}

	/**
	 * Returns the clazz remote service.
	 *
	 * @return the clazz remote service
	 */
	public com.codeengine.StudentManagement.service.ClazzService getClazzService() {
		return clazzService;
	}

	/**
	 * Sets the clazz remote service.
	 *
	 * @param clazzService the clazz remote service
	 */
	public void setClazzService(
		com.codeengine.StudentManagement.service.ClazzService clazzService) {
		this.clazzService = clazzService;
	}

	/**
	 * Returns the clazz persistence.
	 *
	 * @return the clazz persistence
	 */
	public ClazzPersistence getClazzPersistence() {
		return clazzPersistence;
	}

	/**
	 * Sets the clazz persistence.
	 *
	 * @param clazzPersistence the clazz persistence
	 */
	public void setClazzPersistence(ClazzPersistence clazzPersistence) {
		this.clazzPersistence = clazzPersistence;
	}

	/**
	 * Returns the school local service.
	 *
	 * @return the school local service
	 */
	public com.codeengine.StudentManagement.service.SchoolLocalService getSchoolLocalService() {
		return schoolLocalService;
	}

	/**
	 * Sets the school local service.
	 *
	 * @param schoolLocalService the school local service
	 */
	public void setSchoolLocalService(
		com.codeengine.StudentManagement.service.SchoolLocalService schoolLocalService) {
		this.schoolLocalService = schoolLocalService;
	}

	/**
	 * Returns the school remote service.
	 *
	 * @return the school remote service
	 */
	public com.codeengine.StudentManagement.service.SchoolService getSchoolService() {
		return schoolService;
	}

	/**
	 * Sets the school remote service.
	 *
	 * @param schoolService the school remote service
	 */
	public void setSchoolService(
		com.codeengine.StudentManagement.service.SchoolService schoolService) {
		this.schoolService = schoolService;
	}

	/**
	 * Returns the school persistence.
	 *
	 * @return the school persistence
	 */
	public SchoolPersistence getSchoolPersistence() {
		return schoolPersistence;
	}

	/**
	 * Sets the school persistence.
	 *
	 * @param schoolPersistence the school persistence
	 */
	public void setSchoolPersistence(SchoolPersistence schoolPersistence) {
		this.schoolPersistence = schoolPersistence;
	}

	/**
	 * Returns the student local service.
	 *
	 * @return the student local service
	 */
	public com.codeengine.StudentManagement.service.StudentLocalService getStudentLocalService() {
		return studentLocalService;
	}

	/**
	 * Sets the student local service.
	 *
	 * @param studentLocalService the student local service
	 */
	public void setStudentLocalService(
		com.codeengine.StudentManagement.service.StudentLocalService studentLocalService) {
		this.studentLocalService = studentLocalService;
	}

	/**
	 * Returns the student remote service.
	 *
	 * @return the student remote service
	 */
	public com.codeengine.StudentManagement.service.StudentService getStudentService() {
		return studentService;
	}

	/**
	 * Sets the student remote service.
	 *
	 * @param studentService the student remote service
	 */
	public void setStudentService(
		com.codeengine.StudentManagement.service.StudentService studentService) {
		this.studentService = studentService;
	}

	/**
	 * Returns the student persistence.
	 *
	 * @return the student persistence
	 */
	public StudentPersistence getStudentPersistence() {
		return studentPersistence;
	}

	/**
	 * Sets the student persistence.
	 *
	 * @param studentPersistence the student persistence
	 */
	public void setStudentPersistence(StudentPersistence studentPersistence) {
		this.studentPersistence = studentPersistence;
	}

	/**
	 * Returns the student finder.
	 *
	 * @return the student finder
	 */
	public StudentFinder getStudentFinder() {
		return studentFinder;
	}

	/**
	 * Sets the student finder.
	 *
	 * @param studentFinder the student finder
	 */
	public void setStudentFinder(StudentFinder studentFinder) {
		this.studentFinder = studentFinder;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.codeengine.StudentManagement.model.Clazz",
			clazzLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.codeengine.StudentManagement.model.Clazz");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return Clazz.class;
	}

	protected String getModelClassName() {
		return Clazz.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = clazzPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.codeengine.StudentManagement.service.ClazzLocalService.class)
	protected com.codeengine.StudentManagement.service.ClazzLocalService clazzLocalService;
	@BeanReference(type = com.codeengine.StudentManagement.service.ClazzService.class)
	protected com.codeengine.StudentManagement.service.ClazzService clazzService;
	@BeanReference(type = ClazzPersistence.class)
	protected ClazzPersistence clazzPersistence;
	@BeanReference(type = com.codeengine.StudentManagement.service.SchoolLocalService.class)
	protected com.codeengine.StudentManagement.service.SchoolLocalService schoolLocalService;
	@BeanReference(type = com.codeengine.StudentManagement.service.SchoolService.class)
	protected com.codeengine.StudentManagement.service.SchoolService schoolService;
	@BeanReference(type = SchoolPersistence.class)
	protected SchoolPersistence schoolPersistence;
	@BeanReference(type = com.codeengine.StudentManagement.service.StudentLocalService.class)
	protected com.codeengine.StudentManagement.service.StudentLocalService studentLocalService;
	@BeanReference(type = com.codeengine.StudentManagement.service.StudentService.class)
	protected com.codeengine.StudentManagement.service.StudentService studentService;
	@BeanReference(type = StudentPersistence.class)
	protected StudentPersistence studentPersistence;
	@BeanReference(type = StudentFinder.class)
	protected StudentFinder studentFinder;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private ClazzLocalServiceClpInvoker _clpInvoker = new ClazzLocalServiceClpInvoker();
}