/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.codeengine.StudentManagement.model.impl;

import com.codeengine.StudentManagement.model.School;
import com.codeengine.StudentManagement.model.SchoolModel;
import com.codeengine.StudentManagement.model.SchoolSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the School service. Represents a row in the &quot;GB_School&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.codeengine.StudentManagement.model.SchoolModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SchoolImpl}.
 * </p>
 *
 * @author ces
 * @see SchoolImpl
 * @see com.codeengine.StudentManagement.model.School
 * @see com.codeengine.StudentManagement.model.SchoolModel
 * @generated
 */
@JSON(strict = true)
public class SchoolModelImpl extends BaseModelImpl<School>
	implements SchoolModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a school model instance should use the {@link com.codeengine.StudentManagement.model.School} interface instead.
	 */
	public static final String TABLE_NAME = "GB_School";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "schoolId", Types.BIGINT },
			{ "schoolName", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table GB_School (uuid_ VARCHAR(75) null,schoolId LONG not null primary key,schoolName VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table GB_School";
	public static final String ORDER_BY_JPQL = " ORDER BY school.schoolId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY GB_School.schoolId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.codeengine.StudentManagement.model.School"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.codeengine.StudentManagement.model.School"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.codeengine.StudentManagement.model.School"),
			true);
	public static long UUID_COLUMN_BITMASK = 1L;
	public static long SCHOOLID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static School toModel(SchoolSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		School model = new SchoolImpl();

		model.setUuid(soapModel.getUuid());
		model.setSchoolId(soapModel.getSchoolId());
		model.setSchoolName(soapModel.getSchoolName());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<School> toModels(SchoolSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<School> models = new ArrayList<School>(soapModels.length);

		for (SchoolSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.codeengine.StudentManagement.model.School"));

	public SchoolModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _schoolId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSchoolId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _schoolId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return School.class;
	}

	@Override
	public String getModelClassName() {
		return School.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("schoolId", getSchoolId());
		attributes.put("schoolName", getSchoolName());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long schoolId = (Long)attributes.get("schoolId");

		if (schoolId != null) {
			setSchoolId(schoolId);
		}

		String schoolName = (String)attributes.get("schoolName");

		if (schoolName != null) {
			setSchoolName(schoolName);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getSchoolId() {
		return _schoolId;
	}

	@Override
	public void setSchoolId(long schoolId) {
		_schoolId = schoolId;
	}

	@JSON
	@Override
	public String getSchoolName() {
		if (_schoolName == null) {
			return StringPool.BLANK;
		}
		else {
			return _schoolName;
		}
	}

	@Override
	public void setSchoolName(String schoolName) {
		_schoolName = schoolName;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			School.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public School toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (School)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SchoolImpl schoolImpl = new SchoolImpl();

		schoolImpl.setUuid(getUuid());
		schoolImpl.setSchoolId(getSchoolId());
		schoolImpl.setSchoolName(getSchoolName());

		schoolImpl.resetOriginalValues();

		return schoolImpl;
	}

	@Override
	public int compareTo(School school) {
		long primaryKey = school.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof School)) {
			return false;
		}

		School school = (School)obj;

		long primaryKey = school.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SchoolModelImpl schoolModelImpl = this;

		schoolModelImpl._originalUuid = schoolModelImpl._uuid;

		schoolModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<School> toCacheModel() {
		SchoolCacheModel schoolCacheModel = new SchoolCacheModel();

		schoolCacheModel.uuid = getUuid();

		String uuid = schoolCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			schoolCacheModel.uuid = null;
		}

		schoolCacheModel.schoolId = getSchoolId();

		schoolCacheModel.schoolName = getSchoolName();

		String schoolName = schoolCacheModel.schoolName;

		if ((schoolName != null) && (schoolName.length() == 0)) {
			schoolCacheModel.schoolName = null;
		}

		return schoolCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", schoolId=");
		sb.append(getSchoolId());
		sb.append(", schoolName=");
		sb.append(getSchoolName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.codeengine.StudentManagement.model.School");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>schoolId</column-name><column-value><![CDATA[");
		sb.append(getSchoolId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>schoolName</column-name><column-value><![CDATA[");
		sb.append(getSchoolName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = School.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { School.class };
	private String _uuid;
	private String _originalUuid;
	private long _schoolId;
	private String _schoolName;
	private long _columnBitmask;
	private School _escapedModel;
}